// <auto-generated />
using System;
using HrHarmony.Data.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace HrHarmony.Data.Database.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.13")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Dictionary.AbsenceType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("AbsenceTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Urlop wypoczynkowy"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Urlop bezpłatny"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Urlop okolicznościowy"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "Urlop zdrowotny"
                        },
                        new
                        {
                            Id = 5,
                            TypeName = "Urlop macierzyński"
                        },
                        new
                        {
                            Id = 6,
                            TypeName = "Urlop ojcowski"
                        },
                        new
                        {
                            Id = 7,
                            TypeName = "Urlop na żądanie"
                        },
                        new
                        {
                            Id = 8,
                            TypeName = "Urlop naukowy"
                        },
                        new
                        {
                            Id = 9,
                            TypeName = "Urlop szkoleniowy"
                        },
                        new
                        {
                            Id = 10,
                            TypeName = "Urlop wychowawczy"
                        },
                        new
                        {
                            Id = 11,
                            TypeName = "Urlop rehabilitacyjny"
                        },
                        new
                        {
                            Id = 12,
                            TypeName = "Zwolnienie lekarskie"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Dictionary.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Addresses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            City = "Warszawa",
                            PostalCode = "00-001",
                            Street = "ul. Marszałkowska"
                        },
                        new
                        {
                            Id = 2,
                            City = "Gdańsk",
                            PostalCode = "80-001",
                            Street = "ul. Długa"
                        },
                        new
                        {
                            Id = 3,
                            City = "Kraków",
                            PostalCode = "30-001",
                            Street = "ul. Floriańska"
                        },
                        new
                        {
                            Id = 4,
                            City = "Poznań",
                            PostalCode = "60-001",
                            Street = "ul. Wojska Polskiego"
                        },
                        new
                        {
                            Id = 5,
                            City = "Lublin",
                            PostalCode = "20-001",
                            Street = "ul. Piłsudskiego"
                        },
                        new
                        {
                            Id = 6,
                            City = "Katowice",
                            PostalCode = "40-001",
                            Street = "ul. 3 Maja"
                        },
                        new
                        {
                            Id = 7,
                            City = "Łódź",
                            PostalCode = "90-001",
                            Street = "ul. Mickiewicza"
                        },
                        new
                        {
                            Id = 8,
                            City = "Wrocław",
                            PostalCode = "50-001",
                            Street = "ul. Zamkowa"
                        },
                        new
                        {
                            Id = 9,
                            City = "Szczecin",
                            PostalCode = "70-001",
                            Street = "ul. Słowackiego"
                        },
                        new
                        {
                            Id = 10,
                            City = "Bydgoszcz",
                            PostalCode = "85-001",
                            Street = "ul. Kościuszki"
                        },
                        new
                        {
                            Id = 11,
                            City = "Gdynia",
                            PostalCode = "81-001",
                            Street = "ul. Jana III Sobieskiego"
                        },
                        new
                        {
                            Id = 12,
                            City = "Częstochowa",
                            PostalCode = "42-001",
                            Street = "ul. Świętojańska"
                        },
                        new
                        {
                            Id = 13,
                            City = "Radom",
                            PostalCode = "26-001",
                            Street = "ul. Kopernika"
                        },
                        new
                        {
                            Id = 14,
                            City = "Kielce",
                            PostalCode = "25-001",
                            Street = "ul. 1 Maja"
                        },
                        new
                        {
                            Id = 15,
                            City = "Olsztyn",
                            PostalCode = "10-001",
                            Street = "ul. Sienkiewicza"
                        },
                        new
                        {
                            Id = 16,
                            City = "Rzeszów",
                            PostalCode = "35-001",
                            Street = "ul. Mickiewicza"
                        },
                        new
                        {
                            Id = 17,
                            City = "Białystok",
                            PostalCode = "15-001",
                            Street = "ul. Piastowska"
                        },
                        new
                        {
                            Id = 18,
                            City = "Opole",
                            PostalCode = "45-001",
                            Street = "ul. 11 Listopada"
                        },
                        new
                        {
                            Id = 19,
                            City = "Gorzów Wielkopolski",
                            PostalCode = "66-001",
                            Street = "ul. Malczewskiego"
                        },
                        new
                        {
                            Id = 20,
                            City = "Tarnów",
                            PostalCode = "33-001",
                            Street = "ul. Wyzwolenia"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Dictionary.ContractType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("TypeName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("ContractTypes");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            TypeName = "Umowa o pracę"
                        },
                        new
                        {
                            Id = 2,
                            TypeName = "Umowa zlecenie"
                        },
                        new
                        {
                            Id = 3,
                            TypeName = "Umowa o dzieło"
                        },
                        new
                        {
                            Id = 4,
                            TypeName = "B2B"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Dictionary.EducationLevel", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("LevelName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("EducationLevels");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            LevelName = "Podstawowe"
                        },
                        new
                        {
                            Id = 2,
                            LevelName = "Średnie"
                        },
                        new
                        {
                            Id = 3,
                            LevelName = "Wyższe"
                        },
                        new
                        {
                            Id = 4,
                            LevelName = "Inżynierskie"
                        },
                        new
                        {
                            Id = 5,
                            LevelName = "Magisterskie"
                        },
                        new
                        {
                            Id = 6,
                            LevelName = "Doktorat"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Dictionary.Experience", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ExperienceName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Experiences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            ExperienceName = "Stażysta"
                        },
                        new
                        {
                            Id = 2,
                            ExperienceName = "Młodszy"
                        },
                        new
                        {
                            Id = 3,
                            ExperienceName = "Średniozaawansowany"
                        },
                        new
                        {
                            Id = 4,
                            ExperienceName = "Starszy"
                        },
                        new
                        {
                            Id = 5,
                            ExperienceName = "Ekspert"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Dictionary.MaritalStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("StatusName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("MaritalStatuses");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            StatusName = "Kawaler"
                        },
                        new
                        {
                            Id = 2,
                            StatusName = "Panna"
                        },
                        new
                        {
                            Id = 3,
                            StatusName = "Żonaty"
                        },
                        new
                        {
                            Id = 4,
                            StatusName = "Mężatka"
                        },
                        new
                        {
                            Id = 5,
                            StatusName = "Rozwiedziony"
                        },
                        new
                        {
                            Id = 6,
                            StatusName = "Rozwiedziona"
                        },
                        new
                        {
                            Id = 7,
                            StatusName = "Wdowiec"
                        },
                        new
                        {
                            Id = 8,
                            StatusName = "Wdowa"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Absence", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AbsenceTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AbsenceTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Absences");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AbsenceTypeId = 1,
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 1, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            AbsenceTypeId = 2,
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 2, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            AbsenceTypeId = 3,
                            EmployeeId = 3,
                            EndDate = new DateTime(2023, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            AbsenceTypeId = 4,
                            EmployeeId = 4,
                            EndDate = new DateTime(2023, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            AbsenceTypeId = 5,
                            EmployeeId = 5,
                            EndDate = new DateTime(2023, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 6,
                            AbsenceTypeId = 6,
                            EmployeeId = 1,
                            EndDate = new DateTime(2023, 6, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 6, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 7,
                            AbsenceTypeId = 7,
                            EmployeeId = 2,
                            EndDate = new DateTime(2023, 9, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 9, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 8,
                            AbsenceTypeId = 8,
                            EmployeeId = 3,
                            EndDate = new DateTime(2023, 10, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 10, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 9,
                            AbsenceTypeId = 9,
                            EmployeeId = 4,
                            EndDate = new DateTime(2023, 11, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 11, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 10,
                            AbsenceTypeId = 10,
                            EmployeeId = 5,
                            EndDate = new DateTime(2023, 12, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2023, 12, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 11,
                            AbsenceTypeId = 11,
                            EmployeeId = 1,
                            EndDate = new DateTime(2024, 1, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 12,
                            AbsenceTypeId = 12,
                            EmployeeId = 2,
                            EndDate = new DateTime(2024, 2, 29, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 2, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 13,
                            AbsenceTypeId = 1,
                            EmployeeId = 3,
                            EndDate = new DateTime(2024, 3, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 3, 5, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 14,
                            AbsenceTypeId = 2,
                            EmployeeId = 4,
                            EndDate = new DateTime(2024, 4, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 4, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 15,
                            AbsenceTypeId = 3,
                            EmployeeId = 5,
                            EndDate = new DateTime(2024, 5, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            StartDate = new DateTime(2024, 5, 25, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AddressId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("datetime2");

                    b.Property<int>("EducationLevelId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ExperienceId")
                        .HasColumnType("int");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("MaritalStatusId")
                        .HasColumnType("int");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("AddressId");

                    b.HasIndex("EducationLevelId");

                    b.HasIndex("ExperienceId");

                    b.HasIndex("MaritalStatusId");

                    b.ToTable("Employees");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AddressId = 1,
                            DateOfBirth = new DateTime(1990, 5, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = 1,
                            Email = "janusz.kowalski@example.com",
                            ExperienceId = 1,
                            FullName = "Janusz Kowalski",
                            MaritalStatusId = 1,
                            PhoneNumber = "123456789"
                        },
                        new
                        {
                            Id = 2,
                            AddressId = 2,
                            DateOfBirth = new DateTime(1992, 8, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = 2,
                            Email = "anna.nowak@example.com",
                            ExperienceId = 2,
                            FullName = "Anna Nowak",
                            MaritalStatusId = 2,
                            PhoneNumber = "987654321"
                        },
                        new
                        {
                            Id = 3,
                            AddressId = 3,
                            DateOfBirth = new DateTime(1988, 3, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = 3,
                            Email = "piotr.wisniewski@example.com",
                            ExperienceId = 3,
                            FullName = "Piotr Wiśniewski",
                            MaritalStatusId = 3,
                            PhoneNumber = "111222333"
                        },
                        new
                        {
                            Id = 4,
                            AddressId = 4,
                            DateOfBirth = new DateTime(1991, 11, 8, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = 4,
                            Email = "zofia.dabrowska@example.com",
                            ExperienceId = 4,
                            FullName = "Zofia Dąbrowska",
                            MaritalStatusId = 4,
                            PhoneNumber = "444555666"
                        },
                        new
                        {
                            Id = 5,
                            AddressId = 5,
                            DateOfBirth = new DateTime(1985, 7, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EducationLevelId = 5,
                            Email = "adam.kaczmarek@example.com",
                            ExperienceId = 5,
                            FullName = "Adam Kaczmarek",
                            MaritalStatusId = 5,
                            PhoneNumber = "777888999"
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.EmploymentContract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<string>("ContractNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("ContractSigningDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ContractTypeId")
                        .HasColumnType("int");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("HourlyRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("MonthlyRate")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("ContractTypeId");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmploymentContracts");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BasicSalary = 36000.0m,
                            ContractNumber = "CNT1",
                            ContractSigningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractTypeId = 1,
                            EmployeeId = 1,
                            EndDate = new DateTime(2022, 12, 31, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HourlyRate = 50.0m,
                            MonthlyRate = 3000.0m,
                            StartDate = new DateTime(2022, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 2,
                            BasicSalary = 33600.0m,
                            ContractNumber = "CNT2",
                            ContractSigningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractTypeId = 2,
                            EmployeeId = 2,
                            HourlyRate = 45.0m,
                            MonthlyRate = 2800.0m,
                            StartDate = new DateTime(2023, 3, 15, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 3,
                            BasicSalary = 38400.0m,
                            ContractNumber = "CNT3",
                            ContractSigningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractTypeId = 3,
                            EmployeeId = 3,
                            EndDate = new DateTime(2023, 5, 9, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            HourlyRate = 55.0m,
                            MonthlyRate = 3200.0m,
                            StartDate = new DateTime(2022, 5, 10, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 4,
                            BasicSalary = 42000.0m,
                            ContractNumber = "CNT4",
                            ContractSigningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractTypeId = 4,
                            EmployeeId = 4,
                            HourlyRate = 60.0m,
                            MonthlyRate = 3500.0m,
                            StartDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        },
                        new
                        {
                            Id = 5,
                            BasicSalary = 36000.0m,
                            ContractNumber = "CNT5",
                            ContractSigningDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ContractTypeId = 1,
                            EmployeeId = 5,
                            HourlyRate = 50.0m,
                            MonthlyRate = 3000.0m,
                            StartDate = new DateTime(2023, 6, 20, 0, 0, 0, 0, DateTimeKind.Unspecified)
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Salary", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<decimal>("AdditionalSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Allowances")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("BasicSalary")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<decimal>("Bonuses")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int");

                    b.Property<decimal>("IncomeTax")
                        .HasColumnType("decimal(18, 2)");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("ZUSContributions")
                        .HasColumnType("decimal(18, 2)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("Salaries");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AdditionalSalary = 500.0m,
                            Allowances = 200.0m,
                            BasicSalary = 4000.0m,
                            Bonuses = 1000.0m,
                            EmployeeId = 1,
                            IncomeTax = 1000.0m,
                            PaymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 500.0m
                        },
                        new
                        {
                            Id = 2,
                            AdditionalSalary = 600.0m,
                            Allowances = 250.0m,
                            BasicSalary = 4500.0m,
                            Bonuses = 1200.0m,
                            EmployeeId = 2,
                            IncomeTax = 1100.0m,
                            PaymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 550.0m
                        },
                        new
                        {
                            Id = 3,
                            AdditionalSalary = 550.0m,
                            Allowances = 225.0m,
                            BasicSalary = 4200.0m,
                            Bonuses = 1100.0m,
                            EmployeeId = 3,
                            IncomeTax = 1050.0m,
                            PaymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 525.0m
                        },
                        new
                        {
                            Id = 4,
                            AdditionalSalary = 575.0m,
                            Allowances = 235.0m,
                            BasicSalary = 4300.0m,
                            Bonuses = 1150.0m,
                            EmployeeId = 4,
                            IncomeTax = 1075.0m,
                            PaymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 535.0m
                        },
                        new
                        {
                            Id = 5,
                            AdditionalSalary = 600.0m,
                            Allowances = 250.0m,
                            BasicSalary = 4400.0m,
                            Bonuses = 1200.0m,
                            EmployeeId = 5,
                            IncomeTax = 1100.0m,
                            PaymentDate = new DateTime(2023, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 550.0m
                        },
                        new
                        {
                            Id = 6,
                            AdditionalSalary = 625.0m,
                            Allowances = 260.0m,
                            BasicSalary = 4500.0m,
                            Bonuses = 1250.0m,
                            EmployeeId = 1,
                            IncomeTax = 1125.0m,
                            PaymentDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 560.0m
                        },
                        new
                        {
                            Id = 7,
                            AdditionalSalary = 625.0m,
                            Allowances = 275.0m,
                            BasicSalary = 4600.0m,
                            Bonuses = 1300.0m,
                            EmployeeId = 2,
                            IncomeTax = 1150.0m,
                            PaymentDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 575.0m
                        },
                        new
                        {
                            Id = 8,
                            AdditionalSalary = 650.0m,
                            Allowances = 285.0m,
                            BasicSalary = 4700.0m,
                            Bonuses = 1350.0m,
                            EmployeeId = 3,
                            IncomeTax = 1175.0m,
                            PaymentDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 585.0m
                        },
                        new
                        {
                            Id = 9,
                            AdditionalSalary = 675.0m,
                            Allowances = 300.0m,
                            BasicSalary = 4800.0m,
                            Bonuses = 1400.0m,
                            EmployeeId = 4,
                            IncomeTax = 1200.0m,
                            PaymentDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 600.0m
                        },
                        new
                        {
                            Id = 10,
                            AdditionalSalary = 700.0m,
                            Allowances = 310.0m,
                            BasicSalary = 4900.0m,
                            Bonuses = 1450.0m,
                            EmployeeId = 5,
                            IncomeTax = 1225.0m,
                            PaymentDate = new DateTime(2023, 2, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 610.0m
                        },
                        new
                        {
                            Id = 11,
                            AdditionalSalary = 725.0m,
                            Allowances = 325.0m,
                            BasicSalary = 5000.0m,
                            Bonuses = 1500.0m,
                            EmployeeId = 1,
                            IncomeTax = 1250.0m,
                            PaymentDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 625.0m
                        },
                        new
                        {
                            Id = 12,
                            AdditionalSalary = 750.0m,
                            Allowances = 335.0m,
                            BasicSalary = 5100.0m,
                            Bonuses = 1550.0m,
                            EmployeeId = 2,
                            IncomeTax = 1275.0m,
                            PaymentDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 635.0m
                        },
                        new
                        {
                            Id = 13,
                            AdditionalSalary = 775.0m,
                            Allowances = 350.0m,
                            BasicSalary = 5200.0m,
                            Bonuses = 1600.0m,
                            EmployeeId = 3,
                            IncomeTax = 1300.0m,
                            PaymentDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 650.0m
                        },
                        new
                        {
                            Id = 14,
                            AdditionalSalary = 800.0m,
                            Allowances = 360.0m,
                            BasicSalary = 5300.0m,
                            Bonuses = 1650.0m,
                            EmployeeId = 4,
                            IncomeTax = 1325.0m,
                            PaymentDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 660.0m
                        },
                        new
                        {
                            Id = 15,
                            AdditionalSalary = 825.0m,
                            Allowances = 375.0m,
                            BasicSalary = 5400.0m,
                            Bonuses = 1700.0m,
                            EmployeeId = 5,
                            IncomeTax = 1350.0m,
                            PaymentDate = new DateTime(2023, 3, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 675.0m
                        },
                        new
                        {
                            Id = 16,
                            AdditionalSalary = 850.0m,
                            Allowances = 385.0m,
                            BasicSalary = 5500.0m,
                            Bonuses = 1750.0m,
                            EmployeeId = 1,
                            IncomeTax = 1375.0m,
                            PaymentDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 685.0m
                        },
                        new
                        {
                            Id = 17,
                            AdditionalSalary = 875.0m,
                            Allowances = 400.0m,
                            BasicSalary = 5600.0m,
                            Bonuses = 1800.0m,
                            EmployeeId = 2,
                            IncomeTax = 1400.0m,
                            PaymentDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 700.0m
                        },
                        new
                        {
                            Id = 18,
                            AdditionalSalary = 900.0m,
                            Allowances = 410.0m,
                            BasicSalary = 5700.0m,
                            Bonuses = 1850.0m,
                            EmployeeId = 3,
                            IncomeTax = 1425.0m,
                            PaymentDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 710.0m
                        },
                        new
                        {
                            Id = 19,
                            AdditionalSalary = 925.0m,
                            Allowances = 425.0m,
                            BasicSalary = 5800.0m,
                            Bonuses = 1900.0m,
                            EmployeeId = 4,
                            IncomeTax = 1450.0m,
                            PaymentDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 725.0m
                        },
                        new
                        {
                            Id = 20,
                            AdditionalSalary = 950.0m,
                            Allowances = 435.0m,
                            BasicSalary = 5900.0m,
                            Bonuses = 1950.0m,
                            EmployeeId = 5,
                            IncomeTax = 1475.0m,
                            PaymentDate = new DateTime(2023, 4, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ZUSContributions = 735.0m
                        });
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Management.Visitor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("IpAddress")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Path")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("UserAgent")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VisitorId")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Visitors");
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Absence", b =>
                {
                    b.HasOne("HrHarmony.Data.Models.Entities.Dictionary.AbsenceType", "AbsenceType")
                        .WithMany()
                        .HasForeignKey("AbsenceTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrHarmony.Data.Models.Entities.Main.Employee", "Employee")
                        .WithMany("Absences")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AbsenceType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Employee", b =>
                {
                    b.HasOne("HrHarmony.Data.Models.Entities.Dictionary.Address", "Address")
                        .WithMany()
                        .HasForeignKey("AddressId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrHarmony.Data.Models.Entities.Dictionary.EducationLevel", "EducationLevel")
                        .WithMany()
                        .HasForeignKey("EducationLevelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrHarmony.Data.Models.Entities.Dictionary.Experience", "Experience")
                        .WithMany()
                        .HasForeignKey("ExperienceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrHarmony.Data.Models.Entities.Dictionary.MaritalStatus", "MaritalStatus")
                        .WithMany()
                        .HasForeignKey("MaritalStatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Address");

                    b.Navigation("EducationLevel");

                    b.Navigation("Experience");

                    b.Navigation("MaritalStatus");
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.EmploymentContract", b =>
                {
                    b.HasOne("HrHarmony.Data.Models.Entities.Dictionary.ContractType", "ContractType")
                        .WithMany()
                        .HasForeignKey("ContractTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("HrHarmony.Data.Models.Entities.Main.Employee", "Employee")
                        .WithMany("Contracts")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ContractType");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Salary", b =>
                {
                    b.HasOne("HrHarmony.Data.Models.Entities.Main.Employee", "Employee")
                        .WithMany("Salaries")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("HrHarmony.Data.Models.Entities.Main.Employee", b =>
                {
                    b.Navigation("Absences");

                    b.Navigation("Contracts");

                    b.Navigation("Salaries");
                });
#pragma warning restore 612, 618
        }
    }
}
